// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexico.flex

import java_cup.runtime.Symbol;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\24\0\1\4"+
    "\5\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\11\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\35\1\44\1\45\1\46\2\35\1\47\3\35"+
    "\1\50\1\0\1\51\1\0\1\52\1\0\32\35\1\53"+
    "\1\0\1\54\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\2\1\1\13\1\14"+
    "\1\1\1\15\10\16\1\17\1\20\1\21\1\22\1\0"+
    "\1\23\1\24\1\0\1\12\1\25\1\0\1\26\1\27"+
    "\1\30\1\31\4\16\1\32\3\16\1\0\7\16\1\33"+
    "\2\16\1\34\1\0\2\16\1\35\3\16\1\0\1\16"+
    "\1\36\1\37\1\0\1\16\1\0\1\16\1\0\1\40"+
    "\1\0\1\16\2\0\1\16\2\0\1\16\2\0\1\41"+
    "\1\0\1\42\1\0\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\55\0\132\0\207\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\264\0\55\0\341\0\u010e\0\u013b"+
    "\0\55\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\55\0\55\0\55\0\55"+
    "\0\207\0\55\0\264\0\341\0\u010e\0\55\0\u0357\0\55"+
    "\0\55\0\55\0\55\0\u0384\0\u03b1\0\u03de\0\u040b\0\u01ef"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\55\0\u0627\0\u0654\0\u01ef\0\u0681"+
    "\0\u06ae\0\u06db\0\u01ef\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u01ef\0\u01ef\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u01ef"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u01ef\0\u0a8c\0\55\0\u0ab9\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\25\1\27\1\30"+
    "\3\25\1\31\6\25\1\32\2\25\1\33\1\34\1\35"+
    "\1\36\1\2\1\37\1\40\57\0\1\3\53\0\3\41"+
    "\1\42\10\0\2\41\5\0\24\41\22\0\2\43\51\0"+
    "\1\43\1\0\2\44\51\0\1\43\1\0\2\45\60\0"+
    "\1\46\46\0\1\47\5\0\1\50\1\51\53\0\1\52"+
    "\54\0\1\53\47\0\2\25\5\0\24\25\2\0\1\25"+
    "\17\0\2\25\5\0\4\25\1\54\17\25\2\0\1\25"+
    "\17\0\2\25\5\0\4\25\1\55\17\25\2\0\1\25"+
    "\17\0\2\25\5\0\13\25\1\56\1\25\1\57\6\25"+
    "\2\0\1\25\17\0\2\25\5\0\5\25\1\60\16\25"+
    "\2\0\1\25\17\0\2\25\5\0\20\25\1\61\3\25"+
    "\2\0\1\25\17\0\2\25\5\0\1\62\23\25\2\0"+
    "\1\25\17\0\2\25\5\0\7\25\1\63\14\25\2\0"+
    "\1\25\2\0\14\47\1\64\4\47\1\0\33\47\15\0"+
    "\2\25\5\0\6\25\1\65\15\25\2\0\1\25\17\0"+
    "\2\25\5\0\2\25\1\66\21\25\2\0\1\25\17\0"+
    "\2\25\5\0\21\25\1\67\2\25\2\0\1\25\17\0"+
    "\2\25\5\0\3\25\1\70\20\25\2\0\1\25\17\0"+
    "\2\25\5\0\10\25\1\71\13\25\2\0\1\25\17\0"+
    "\2\25\5\0\12\25\1\72\11\25\2\0\1\25\17\0"+
    "\2\25\5\0\10\25\1\73\13\25\2\0\1\25\25\0"+
    "\1\74\46\0\2\25\5\0\10\25\1\75\13\25\2\0"+
    "\1\25\17\0\2\25\5\0\13\25\1\76\10\25\2\0"+
    "\1\25\17\0\2\25\5\0\4\25\1\77\17\25\2\0"+
    "\1\25\15\0\1\100\1\0\2\25\5\0\3\25\1\101"+
    "\20\25\2\0\1\25\17\0\2\25\5\0\15\25\1\102"+
    "\6\25\2\0\1\25\17\0\2\25\5\0\4\25\1\103"+
    "\17\25\2\0\1\25\17\0\2\25\5\0\13\25\1\104"+
    "\10\25\2\0\1\25\17\0\2\25\5\0\15\25\1\105"+
    "\6\25\2\0\1\25\17\0\2\25\5\0\1\106\23\25"+
    "\2\0\1\25\45\0\1\107\26\0\2\25\5\0\4\25"+
    "\1\110\17\25\2\0\1\25\17\0\2\25\5\0\22\25"+
    "\1\111\1\25\2\0\1\25\17\0\2\25\5\0\4\25"+
    "\1\112\17\25\2\0\1\25\15\0\1\113\1\0\2\25"+
    "\5\0\24\25\2\0\1\25\17\0\2\25\5\0\20\25"+
    "\1\114\3\25\2\0\1\25\46\0\1\115\25\0\2\25"+
    "\5\0\2\25\1\116\21\25\2\0\1\25\45\0\1\117"+
    "\26\0\2\25\5\0\4\25\1\120\17\25\2\0\1\25"+
    "\44\0\1\121\27\0\2\25\5\0\13\25\1\122\10\25"+
    "\2\0\1\25\46\0\1\123\42\0\1\124\37\0\2\25"+
    "\5\0\1\125\23\25\2\0\1\25\44\0\1\126\56\0"+
    "\1\127\25\0\2\25\5\0\20\25\1\130\3\25\2\0"+
    "\1\25\34\0\1\131\46\0\1\132\45\0\2\25\5\0"+
    "\4\25\1\133\17\25\2\0\1\25\46\0\1\134\50\0"+
    "\1\135\40\0\1\136\70\0\1\137\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2790];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\6\11\1\1\1\11\3\1\1\11"+
    "\13\1\4\11\1\0\1\11\1\1\1\0\1\1\1\11"+
    "\1\0\4\11\10\1\1\0\7\1\1\11\3\1\1\0"+
    "\6\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

	// Valores maximos
	private final int STR_MAX_LEN = 30
	private final Integer INT_MAX_LEN = 65536		/* 2?????*/
	private final Float FLOAT_MAX_LEN = 4294967296 	/* 2????*/
	
	
	// Tabla de s??mbolos
	private List<Map<Columna, String>> symtbl;
	
	
	// Inicializa la tabla de simbolos
	private void iniTable() {
		TablaSimbolos.escribirArchivo(null, null, false);
		this.symtbl = TablaSimbolos.leerArchivo(null);
	}
	
	
	// Agrega un simbolo de ID de variable
	public void addSym(String nombre, String token, String tipo) {
		boolean encontrado = false;
		int i = 0;
		while (!encontrado && i < symtbl.size()) {
			encontrado = symtbl.get(i).get(Columna.NOMBRE).equals(nombre);
			i++;
		}
		if (!encontrado) {
			Map<Columna, String> sym = new HashMap<Columna, String>();
			sym.put(Columna.NOMBRE, nombre);
			sym.put(Columna.TOKEN, token);
			sym.put(Columna.TIPO, tipo);
			this.symtbl.add(sym);
			TablaSimbolos.escribirArchivo(Arrays.asList(sym), null, true);
		}
	}
	
	
	// Agrega una constante 
	public void addSym(String nombre, String token, String valor, Integer len) {
		boolean encontrado = false;
		int i = 0;
		while (!encontrado && i < symtbl.size()) {
			encontrado = symtbl.get(i).get(Columna.NOMBRE).equals(nombre);
			i++;
		}
		if (!encontrado) {
			Map<Columna,String> sym = new HashMap<Columna, String>();
			sym.put(Columna.NOMBRE, nombre);
			sym.put(Columna.TOKEN, token);
			sym.put(Columna.VALOR, valor);
			if (len != null) sym.put(Columna.LEN, String.valueOf(len));
			this.symtbl.add(sym);
			TablaSimbolos.escribirArchivo(Arrays.asList(sym), null, true);
		}
	}
	
	
	// Verifica la cantidad de bits del integer (recibido como string)
	public boolean checkInt(String s){
		// Verifico que s no este vacia
		if (s.isEmpty()){
			return false;
		}
		try{
			// Parseo a integer
			Integer number = Integer.valueOf(s)
			// Verifico que no exceda el maximo valor
			if (number > INT_MAX_VALUE){
				return false;
			}
		}catch(Exception e){
			System.out.println("Error parseando lexema " + yytext() + ".");
			System.out.println(e.toString());
			return false;
		}	
		return true;
	}
	

	// Verifica la cantidad de bits del float (recibido como string)
	public booolean checkFloat(String s){
		// Verifico que s no este vacia
		if (s.isEmpty()){
			return false;
		}
		try{
			// Parseo a float
			Float number = Float.valueOf(s)
			// Verifico que no exceda el maximo valor
			if (number > FLOAT_MAX_VALUE){
				return false;
			}
		}catch(Exception e){
			System.out.println("Error parseando lexema " + yytext() + ".");
			System.out.println(e.toString());
			return false;
		}
		return true;
	}
	
	
	// Verifica que el string no tenga mas de 30 caracteres
	public boolean checkStr(String s){
		if (s.isEmpty() || (s.length() > 30)){
			return false;
		}
		return true;
	}
	
	
	// Imprime cada par token:lexema hallado
	public void anuncio(String token){
		System.out.println("***Nuevo hallazgo***")
		System.out.println("\tToken = " + token + ".\n\tLexema = " + yytext() + ".\n");
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline + " columna " + yycolumn + ".");
            }
            // fall through
          case 36: break;
          case 2:
            { /* no hacer nada */
            }
            // fall through
          case 37: break;
          case 3:
            { return new Symbol(Simbolo.PAR_ABRE, yycolumn, yyline);
            }
            // fall through
          case 38: break;
          case 4:
            { return new Symbol(Simbolo.PAR_CIERRA, yycolumn, yyline);
            }
            // fall through
          case 39: break;
          case 5:
            { return new Symbol(Simbolo.MULTIPLICA, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 40: break;
          case 6:
            { return new Symbol(Simbolo.SUMA, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 41: break;
          case 7:
            { return new Symbol(Simbolo.COMA, yycolumn, yyline);
            }
            // fall through
          case 42: break;
          case 8:
            { return new Symbol(Simbolo.RESTA, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 43: break;
          case 9:
            { return new Symbol(Simbolo.DIVIDE, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 44: break;
          case 10:
            { if !(checkInt(yytext())){
								System.out.println("Lexema " + yytext() + " excede el valor m??ximo de un Integer (" + INT_MAX_LEN + ").");	
							}
							else{
								anuncio("CONST_INT");
							}
							anuncio("CONST_INT");
							addSym("_" + yytext(), "CONST_INT", yytext(), null);
                            return new Symbol(Simbolo.CONST_INT, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 45: break;
          case 11:
            { return new Symbol(Simbolo.PUNTO_COMA, yycolumn, yyline);
            }
            // fall through
          case 46: break;
          case 12:
            { return new Symbol(Simbolo.MENOR, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 47: break;
          case 13:
            { return new Symbol(Simbolo.MAYOR, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 48: break;
          case 14:
            { anuncio("ID"); addSym(yytext(), "ID", null);
            }
            // fall through
          case 49: break;
          case 15:
            { return new Symbol(Simbolo.COR_ABRE, yycolumn, yyline);
            }
            // fall through
          case 50: break;
          case 16:
            { return new Symbol(Simbolo.COR_CIERRA, yycolumn, yyline);
            }
            // fall through
          case 51: break;
          case 17:
            { return new Symbol(Simbolo.LLAVE_ABRE, yycolumn, yyline);
            }
            // fall through
          case 52: break;
          case 18:
            { return new Symbol(Simbolo.LLAVE_CIERRA, yycolumn, yyline);
            }
            // fall through
          case 53: break;
          case 19:
            { if !(checkStr(yytext())){
								System.out.println("Lexema " + yytext() + " excede la longitud maxima de un String (" + STR_MAX_LEN + ").");		
							}
							else{
								anuncio("CONST_STR");
							}
							anuncio("CONST_STR");
							addSym("_" + yytext(), "CONST_STR", yytext(), null);
                            return new Symbol(Simbolo.CONST_STR, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 54: break;
          case 20:
            { if !(checkFloat(yytext())){
								System.out.println("Lexema " + yytext() + " excede el valor m??ximo de un Float (" + FLOAT_MAX_LEN + ").");	
							}
							else{
								anuncio("CONST_FLOAT");
							}
							anuncio("CONST_FLOAT");
							addSym("_" + yytext(), "CONST_FLOAT", yytext(), null);
                            return new Symbol(Simbolo.CONST_FLOAT, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 55: break;
          case 21:
            { return new Symbol(Simbolo.ASIGNA, yycolumn, yyline);
            }
            // fall through
          case 56: break;
          case 22:
            { return new Symbol(Simbolo.MENOR_IGUAL, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 57: break;
          case 23:
            { return new Symbol(Simbolo.DISTINTO, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 58: break;
          case 24:
            { return new Symbol(Simbolo.IGUAL, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 59: break;
          case 25:
            { return new Symbol(Simbolo.MAYOR_IGUAL, yycolumn, yyline, new String(yytext()));
            }
            // fall through
          case 60: break;
          case 26:
            { return new Symbol(Simbolo.IF, yycolumn, yyline);
            }
            // fall through
          case 61: break;
          case 27:
            { /* se ignora el contenido */
            }
            // fall through
          case 62: break;
          case 28:
            { return new Symbol(Simbolo.ELSE, yycolumn, yyline);
            }
            // fall through
          case 63: break;
          case 29:
            { return new Symbol(Simbolo.TAKE, yycolumn, yyline);
            }
            // fall through
          case 64: break;
          case 30:
            { return new Symbol(Simbolo.PRINT, yycolumn, yyline);
            }
            // fall through
          case 65: break;
          case 31:
            { return new Symbol(Simbolo.WHILE, yycolumn, yyline);
            }
            // fall through
          case 66: break;
          case 32:
            { iniTable(); return new Symbol(Simbolo.DECLARE, yycolumn, yyline);
            }
            // fall through
          case 67: break;
          case 33:
            { return new Symbol(Simbolo.ENDDECLARE, yycolumn, yyline);
            }
            // fall through
          case 68: break;
          case 34:
            { return new Symbol(Simbolo.END_PROGRAM, yycolumn, yyline);
            }
            // fall through
          case 69: break;
          case 35:
            { return new Symbol(Simbolo.BEGIN_PROGRAM, yycolumn, yyline);
            }
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
