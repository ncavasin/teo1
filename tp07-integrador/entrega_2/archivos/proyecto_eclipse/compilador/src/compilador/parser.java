
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import compilador.TablaSimbolos.Columna;
import java.util.List;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\005\000\002\002" +
    "\006\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\005\000\002\006\007\000\002\006\007\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\016\003\000\002\017\014" +
    "\000\002\017\013\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\023\005\000\002" +
    "\023\003\000\002\020\004\000\002\021\007\000\002\021" +
    "\011\000\002\022\007\000\002\024\011\000\002\024\011" +
    "\000\002\024\007\000\002\024\007\000\002\024\005\000" +
    "\002\013\005\000\002\013\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\027\003\000\002\027\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\004\007\006\005\001\002\000\004\004" +
    "\040\001\002\000\004\015\016\001\002\000\004\002\014" +
    "\001\002\000\004\021\010\001\002\000\004\027\013\001" +
    "\002\000\004\005\012\001\002\000\004\002\000\001\002" +
    "\000\016\005\uffda\014\uffda\021\uffda\023\uffda\025\uffda\026" +
    "\uffda\001\002\000\004\002\001\001\002\000\006\007\ufffc" +
    "\015\ufffc\001\002\000\004\026\022\001\002\000\006\007" +
    "\020\015\016\001\002\000\004\004\ufffe\001\002\000\006" +
    "\007\ufffd\015\ufffd\001\002\000\006\016\026\017\025\001" +
    "\002\000\004\016\024\001\002\000\006\007\ufffb\015\ufffb" +
    "\001\002\000\004\026\022\001\002\000\004\010\027\001" +
    "\002\000\004\015\030\001\002\000\010\032\033\033\034" +
    "\034\031\001\002\000\006\016\ufff6\017\ufff6\001\002\000" +
    "\006\016\ufff9\017\ufff9\001\002\000\006\016\ufff7\017\ufff7" +
    "\001\002\000\006\016\ufff8\017\ufff8\001\002\000\004\017" +
    "\036\001\002\000\010\032\033\033\034\034\031\001\002" +
    "\000\006\016\ufffa\017\ufffa\001\002\000\012\021\010\023" +
    "\045\025\041\026\046\001\002\000\004\011\170\001\002" +
    "\000\016\005\ufff4\014\ufff4\021\ufff4\023\ufff4\025\ufff4\026" +
    "\ufff4\001\002\000\016\005\ufff0\014\ufff0\021\ufff0\023\ufff0" +
    "\025\ufff0\026\ufff0\001\002\000\016\005\ufff3\014\ufff3\021" +
    "\ufff3\023\ufff3\025\ufff3\026\ufff3\001\002\000\004\011\123" +
    "\001\002\000\004\010\054\001\002\000\016\005\ufff2\014" +
    "\ufff2\021\ufff2\023\ufff2\025\ufff2\026\ufff2\001\002\000\014" +
    "\005\053\021\010\023\045\025\041\026\046\001\002\000" +
    "\016\005\ufff1\014\ufff1\021\ufff1\023\ufff1\025\ufff1\026\ufff1" +
    "\001\002\000\016\005\ufff5\014\ufff5\021\ufff5\023\ufff5\025" +
    "\ufff5\026\ufff5\001\002\000\004\002\uffff\001\002\000\016" +
    "\011\062\022\055\026\064\027\060\030\056\031\061\001" +
    "\002\000\004\011\101\001\002\000\044\005\uffe7\012\uffe7" +
    "\014\uffe7\021\uffe7\023\uffe7\025\uffe7\026\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\001\002\000\044\005\uffec\012\uffec\014" +
    "\uffec\021\uffec\023\uffec\025\uffec\026\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046\uffec\047" +
    "\073\050\072\001\002\000\044\005\uffe5\012\uffe5\014\uffe5" +
    "\021\uffe5\023\uffe5\025\uffe5\026\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\001\002\000\044\005\uffe6\012\uffe6\014\uffe6\021" +
    "\uffe6\023\uffe6\025\uffe6\026\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\001\002\000\016\011\062\022\055\026\064\027\060" +
    "\030\056\031\061\001\002\000\022\005\uffef\014\uffef\021" +
    "\uffef\023\uffef\025\uffef\026\uffef\045\070\046\067\001\002" +
    "\000\044\005\uffe8\012\uffe8\014\uffe8\021\uffe8\023\uffe8\025" +
    "\uffe8\026\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\001\002\000" +
    "\044\005\uffe9\012\uffe9\014\uffe9\021\uffe9\023\uffe9\025\uffe9" +
    "\026\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002\000\044" +
    "\005\uffe3\012\uffe3\014\uffe3\021\uffe3\023\uffe3\025\uffe3\026" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\001\002\000\016\011" +
    "\062\022\055\026\064\027\060\030\056\031\061\001\002" +
    "\000\016\011\062\022\055\026\064\027\060\030\056\031" +
    "\061\001\002\000\044\005\uffee\012\uffee\014\uffee\021\uffee" +
    "\023\uffee\025\uffee\026\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\045\uffee\046\uffee\047\073\050\072" +
    "\001\002\000\016\011\062\022\055\026\064\027\060\030" +
    "\056\031\061\001\002\000\016\011\062\022\055\026\064" +
    "\027\060\030\056\031\061\001\002\000\044\005\uffea\012" +
    "\uffea\014\uffea\021\uffea\023\uffea\025\uffea\026\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\001\002\000\044\005\uffeb\012\uffeb" +
    "\014\uffeb\021\uffeb\023\uffeb\025\uffeb\026\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\001\002\000\044\005\uffed\012\uffed\014" +
    "\uffed\021\uffed\023\uffed\025\uffed\026\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\047" +
    "\073\050\072\001\002\000\010\012\100\045\070\046\067" +
    "\001\002\000\044\005\uffe4\012\uffe4\014\uffe4\021\uffe4\023" +
    "\uffe4\025\uffe4\026\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\001" +
    "\002\000\012\045\104\046\102\047\106\050\103\001\002" +
    "\000\004\020\uffdf\001\002\000\004\020\uffdd\001\002\000" +
    "\004\020\uffe0\001\002\000\004\020\107\001\002\000\004" +
    "\020\uffde\001\002\000\004\030\110\001\002\000\004\020" +
    "\111\001\002\000\004\015\112\001\002\000\006\016\114" +
    "\030\113\001\002\000\006\016\uffdb\020\uffdb\001\002\000" +
    "\004\012\122\001\002\000\006\016\117\020\116\001\002" +
    "\000\004\030\121\001\002\000\004\012\120\001\002\000" +
    "\044\005\uffe2\012\uffe2\014\uffe2\021\uffe2\023\uffe2\025\uffe2" +
    "\026\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\001\002\000\006" +
    "\016\uffdc\020\uffdc\001\002\000\044\005\uffe1\012\uffe1\014" +
    "\uffe1\021\uffe1\023\uffe1\025\uffe1\026\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\001\002\000\016\011\124\022\055\026\064" +
    "\027\060\030\056\031\061\001\002\000\016\011\124\022" +
    "\055\026\064\027\060\030\056\031\061\001\002\000\022" +
    "\035\142\036\144\037\137\040\145\041\141\042\140\045" +
    "\070\046\067\001\002\000\004\012\127\001\002\000\004" +
    "\013\130\001\002\000\014\014\135\021\010\023\045\025" +
    "\041\026\046\001\002\000\020\005\uffd9\014\uffd9\021\uffd9" +
    "\023\uffd9\024\132\025\uffd9\026\uffd9\001\002\000\004\013" +
    "\130\001\002\000\016\005\uffd8\014\uffd8\021\uffd8\023\uffd8" +
    "\025\uffd8\026\uffd8\001\002\000\014\014\136\021\010\023" +
    "\045\025\041\026\046\001\002\000\020\005\uffd0\014\uffd0" +
    "\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\001\002\000" +
    "\020\005\uffd1\014\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\001\002\000\016\011\uffcd\022\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\001\002\000\016\011\uffca\022\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\001\002\000\016\011" +
    "\uffcb\022\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\001\002" +
    "\000\016\011\uffcf\022\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\001\002\000\016\011\146\022\055\026\064\027\060" +
    "\030\056\031\061\001\002\000\016\011\uffce\022\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\001\002\000\016\011\uffcc" +
    "\022\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\001\002\000" +
    "\016\011\124\022\055\026\064\027\060\030\056\031\061" +
    "\001\002\000\010\012\uffd2\045\070\046\067\001\002\000" +
    "\024\012\100\035\142\036\144\037\137\040\145\041\141" +
    "\042\140\045\070\046\067\001\002\000\004\012\152\001" +
    "\002\000\004\012\uffd3\001\002\000\004\012\154\001\002" +
    "\000\022\035\142\036\144\037\137\040\145\041\141\042" +
    "\140\043\155\044\160\001\002\000\004\011\uffc9\001\002" +
    "\000\004\011\165\001\002\000\016\011\161\022\055\026" +
    "\064\027\060\030\056\031\061\001\002\000\004\011\uffc8" +
    "\001\002\000\016\011\124\022\055\026\064\027\060\030" +
    "\056\031\061\001\002\000\010\012\uffd4\045\070\046\067" +
    "\001\002\000\004\012\164\001\002\000\004\012\uffd5\001" +
    "\002\000\016\011\124\022\055\026\064\027\060\030\056" +
    "\031\061\001\002\000\004\012\167\001\002\000\004\012" +
    "\uffd6\001\002\000\016\011\124\022\055\026\064\027\060" +
    "\030\056\031\061\001\002\000\004\012\172\001\002\000" +
    "\004\013\130\001\002\000\016\005\uffd7\014\uffd7\021\uffd7" +
    "\023\uffd7\025\uffd7\026\uffd7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\016\005\014\001\001\000\002\001\001" +
    "\000\004\020\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\022\001\001\000\004\005" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\036\001\001\000\002\001\001\000\016\010\047\011" +
    "\041\012\043\020\046\021\050\022\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\051\012\043\020\046\021\050\022\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\062\015\056\016\064\017\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\076\015\056\016" +
    "\064\017\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\075\016" +
    "\064\017\065\001\001\000\010\015\070\016\064\017\065" +
    "\001\001\000\002\001\001\000\006\016\074\017\065\001" +
    "\001\000\006\016\073\017\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\124\015\056\016\064\017\065\024\125" +
    "\001\001\000\014\014\147\015\056\016\064\017\065\024" +
    "\152\001\001\000\004\025\142\001\001\000\002\001\001" +
    "\000\004\013\130\001\001\000\016\010\133\011\041\012" +
    "\043\020\046\021\050\022\042\001\001\000\002\001\001" +
    "\000\004\013\132\001\001\000\002\001\001\000\014\011" +
    "\051\012\043\020\046\021\050\022\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\146" +
    "\015\056\016\064\017\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\147\015\056\016\064\017\065" +
    "\024\150\001\001\000\002\001\001\000\004\025\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\156\027\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\161\015\056\016\064\017\065" +
    "\001\001\000\002\001\001\000\014\014\147\015\056\016" +
    "\064\017\065\024\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\124\015\056\016" +
    "\064\017\065\024\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\124\015\056\016\064\017\065\024" +
    "\170\001\001\000\002\001\001\000\004\013\172\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/**
	 * Metodo al que se llama automaticamente ante algun error sintactico.
	 */
    public void syntax_error(Symbol s) {
        System.out.println("### Error en la linea " + (s.right+1) + " columna " + s.left + ". Simbolo " + s + " no reconocido. Valor '" + s.value+ "'.");
    }
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
	private void actualizarTablaSimbolos(Map<String, Deque> map) {
		Deque<String> colaTipos = map.get(COLA_TIPOS);
		Deque<String> pilaVariables = map.get(PILA_VARIABLES);
			
		Map<String, String> declaraciones = new HashMap<String, String>();
		while (!pilaVariables.isEmpty()) {
			declaraciones.put(pilaVariables.pop(), colaTipos.remove());
		}

		List<Map<Columna, String>> lineas = TablaSimbolos.leerArchivo(null);

		int i = 0;
		while (i < lineas.size() && declaraciones.size() > 0) {
			Map<Columna, String> linea = lineas.get(i);
			if (linea.get(Columna.TOKEN).equals("ID")) {
				String nombre = linea.get(Columna.NOMBRE);
				if (declaraciones.containsKey(nombre)) {
					lineas.get(i).put(Columna.TIPO, declaraciones.get(nombre));
					declaraciones.remove(nombre);
				}
			}
			i++;
		}
		
		TablaSimbolos.escribirArchivo(lineas, null, false);
	}

	// Usadas para el mapeo de pares de declaraciones
	private final String PILA_VARIABLES = "PILA_VARIABLES";
	private final String COLA_TIPOS = "COLA_TIPOS";


	// Limpia strings
	public String limpiarString(String s) {
		if (s.length() >= 2 && s.charAt(0) == '"' && s.charAt(s.length() - 1) == '"'){
			s = s.substring(1, s.length() - 1);
		}
		return s;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= BEGIN_PROGRAM funcion_print END_PROGRAM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				System.out.println("[Regla 00b] - <programa> - Se encontro <funcion_print> '"+f+"'");
				System.out.println("[Regla 00] - <programa> - COMPILACION EXITOSA!");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= declaraciones BEGIN_PROGRAM lista_sentencias END_PROGRAM 
            {
              Object RESULT =null;
		 
				System.out.println("[Regla 00] - <programa> - COMPILACION EXITOSA!");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= DECLARE lista_declaraciones ENDDECLARE 
            {
              Object RESULT =null;
		 	System.out.println("[Regla 01] - <declaraciones> - Se encontro DECLARE <lista_declaraciones> ENDDECLARE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_declaraciones ::= lista_declaraciones linea_declaracion 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
							System.out.println("[Regla 02] - Se encontro <lista_declaraciones><linea_declaracion>");
						 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= linea_declaracion 
            {
              Object RESULT =null;
		 						
							System.out.println("[Regla 03] - Se completo una <linea_declaracion>");
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // linea_declaracion ::= COR_ABRE declaracion COR_CIERRA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Map<String,Deque> p = (Map<String,Deque>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						// Recibo en d el diccionario resultante con las variables y sus tipos
						// y actualizo la tabla de simbolos de manera acorde
						actualizarTablaSimbolos(p);
						System.out.println("[Regla 04] - <linea_declaracion> '[" + p.toString() + "]'");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= ID COMA declaracion COMA tipo 
            {
              Map<String,Deque> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Map<String,Deque> p = (Map<String,Deque>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					/* 
					 * Como este es el caso recursivo, las estructuras a usar van a ser creadas 
					 * cuando se llegue al caso embrionario.
					*/
					
					// Recupero cada estructura del diccionario y apilo y encolo respectivamente
					p.get(PILA_VARIABLES).push(id);
					p.get(COLA_TIPOS).add(t);
					RESULT = p;
										
					System.out.println("[Regla 05] - <declaracion> - Se encontro '" +id + ", <declaracion>, "+t+"'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= ID COR_CIERRA ASIGNA COR_ABRE tipo 
            {
              Map<String,Deque> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					/*
					 * Como este es el caso embrionario, aca se crean
					 * tanto el diccionario como la pila y la cola.
					*/
					
					// Diccionario que almacena pares de estructuras de datos {pilaIds}:{colaTipos}
					Map<String, Deque> m = new HashMap<String, Deque>();
					
					// Pila de variables que se recupera LIFO
					Deque<String> pilaVariables = new ArrayDeque<String>();
					
					// Cola de tipos que se recupera FIFO
					Deque<String> colaTipos = new ArrayDeque<String>();
					
					// Agrego cada dato a su respectiva estructura
					pilaVariables.push(id);
					colaTipos.add(t);
	
					// Pongo cada estructura en el mapa
					m.put(PILA_VARIABLES, pilaVariables);
					m.put(COLA_TIPOS, colaTipos);
					
					RESULT = m;
					System.out.println("[Regla 06] - <declaracion> - Se encontro '"+ id + "] = ["+t+"'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= INT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = t;
			System.out.println("[Regla 07] - <tipo> - Se encontro el tipo '"+t+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= FLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = t;
			System.out.println("[Regla 08] - <tipo> - Se encontro el tipo '"+t+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= STRING 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = t;
			System.out.println("[Regla 09] - <tipo> - Se encontro el tipo '"+t+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_sentencias ::= lista_sentencias sentencia 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						/* 
						 * Como este es el caso recursivo, la lista sera creada 
						 * en el caso embrionario.
						*/
						
						// Devuelvo la lista
						RESULT = new String(ls + s);
						System.out.println("[Regla 10] - <lista_sentencias> - Se agrego la sentencia:\n'"+s.substring(1, s.length())+"'");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_sentencias ::= sentencia 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						/*
						 * Como este es el caso embrionario, aca se crea la 
						 * lista de sentencias.
						*/
						
							
						// Creo y devuelvo la lista
						RESULT = s;
						System.out.println("[Regla 11] - <lista_sentencias> - Se agrego la sentencia:\n'"+s.substring(1, s.length())+"'");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignacion 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = asig;
					System.out.println("[Regla 12] - <sentencia> - '"+asig.substring(1, asig.length())+"' es una <asignacion>");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= funcion_print 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = fp;
					System.out.println("[Regla 13] - <sentencia> - Se encontro una <funcion_print>");		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= funcion_if 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = fi;
					System.out.println("[Regla 14] - <sentencia> - Se encontro una <funcion_if>");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= funcion_while 
            {
              String RESULT =null;
		int fwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fw = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = fw;
					System.out.println("[Regla 15] - <sentencia> - Se encontro una <funcion_while>");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignacion ::= ID ASIGNA expresion 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new String("\n"+id + " = " + exp);
					System.out.println("[Regla 16] - <asignacion> - '"+id+" = "+exp+"'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new String(exp + " + " + term);
				System.out.println("[Regla 17] - <expresion> - Se encontro la suma '" + exp + " + " + term+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new String(exp + " - " + term);
				System.out.println("[Regla 18] - <expresion> - Se encontro la resta '" + exp + " - " + term+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= termino 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = term;
				System.out.println("[Regla 19] - <expresion> - '"+term+"' es un <termino>");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termino ::= termino MULTIPLICA factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new String(term + " * " + fac);
				System.out.println("[Regla 20] - <termino> - Se encontro la multiplicacion '" + term + " * " + fac +"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termino ::= termino DIVIDE factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new String(term + " / " + fac);
				System.out.println("[Regla 21] - <termino> - Se encontro la division '" + term + " / " + fac +"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= factor 
            {
              Object RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = fac;
				System.out.println("[Regla 22] - <termino> - '"+fac+"' es un <factor>");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= ID 
            {
              Object RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = fac;
			System.out.println("[Regla 23] - <factor> - Se encontro el ID '"+fac+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= CTE_INT 
            {
              Object RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			
			RESULT = Integer.parseInt(fac);
			System.out.println("[Regla 24] - <factor> - Se encontro la CTE_INT '"+Integer.parseInt(fac)+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= CTE_FLOAT 
            {
              Object RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = Float.parseFloat(fac);
			System.out.println("[Regla 25] - <factor> - Se encontro la CTE_FLOAT '"+Float.parseFloat(fac)+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= CTE_STRING 
            {
              Object RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = fac;;
			System.out.println("[Regla 25] - <factor> - Se encontro la CTE_STRING '"+fac+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= PAR_ABRE expresion PAR_CIERRA 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = exp;
			System.out.println("[Regla 26] - <factor> - Se encontro la <expresion> '("+exp+")'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= funcion_take 
            {
              Object RESULT =null;
		int ftakeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ftakeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ftake = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = ftake;
			System.out.println("[Regla 27] - <factor> - '"+ftake+"' es una <funcion_take>");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion_take ::= TAKE PAR_ABRE op_num PUNTO_COMA CTE_INT PUNTO_COMA COR_ABRE lista_take COR_CIERRA PAR_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cintright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cint = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					RESULT = new String("TAKE ( "+op+"; "+cint+"; [ "+lt+" ] )");
					System.out.println("[Regla 28] - <take> - Se encontro 'TAKE (<op_num>;<CTE_INT>;[<lista_take>])'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_take",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion_take ::= TAKE PAR_ABRE op_num PUNTO_COMA CTE_INT PUNTO_COMA COR_ABRE COR_CIERRA PAR_CIERRA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cintright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cint = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					RESULT = new String("0");
					System.out.println("[Regla 29] - <take> - Se encontro 'TAKE (<op_num>;<CTE_INT>;[])'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_take",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_num ::= SUMA 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = op;
				System.out.println("[Regla 30] - <op_num> - Se encontro el operador '"+op+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_num",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_num ::= RESTA 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = op;
				System.out.println("[Regla 31] - <op_num> - Se encontro el operador '"+op+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_num",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_num ::= DIVIDE 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = op;
				System.out.println("[Regla 32] - <op_num> - Se encontro el operador '"+op+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_num",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_num ::= MULTIPLICA 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = op;
				System.out.println("[Regla 33] - <op_num> - Se encontro el operador '"+op+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_num",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_take ::= lista_take PUNTO_COMA CTE_INT 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cint = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			/*
			 * Caso recursivo, toma la lista y agrega el integer
			 * que recibio.
			*/
			// Devuelvo la lista de argumentos
			RESULT =  l + " ; " + cint;
			System.out.println("[Regla 34] - <lista_take> - Se encontro la CTE_INT '"+cint+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_take",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_take ::= CTE_INT 
            {
              String RESULT =null;
		int cintleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cintright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cint = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			/* 
			 * Caso embrionario. Creo la lista y agrego el ultimo integer
			 * que se recibe
			*/

			RESULT = cint;
			System.out.println("[Regla 35] - <lista_take> - Se encontro la CTE_INT '"+cint+"'");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_take",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcion_print ::= PRINT CTE_STRING 
            {
              String RESULT =null;
		int cstringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cstringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cstring = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
					RESULT = new String("\nPRINT "+cstring);
					System.out.println("[Regla 36] - <funcion_print> - Se encontro PRINT '"+cstring+"'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_print",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion_if ::= IF PAR_ABRE condicion PAR_CIERRA bloque 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = new String("\nIF ("+cond+")"+b);
				System.out.println("[Regla 37] - <funcion_if> - Se encontro 'IF <cond> {<bloque>}'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion_if ::= IF PAR_ABRE condicion PAR_CIERRA bloque ELSE bloque 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = new String("\nIF ("+cond+")"+b+"\nELSE"+bb);
				System.out.println("[Regla 38] - <funcion_if> - Se encontro 'IF <cond> {<bloque>} ELSE {<bloque>}'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_if",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion_while ::= WHILE PAR_ABRE condicion PAR_CIERRA bloque 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new String("\nWHILE ("+cond+")" +b);
					System.out.println("[Regla 39] - <funcion_while> - Se encontro 'WHILE (<condicion>){<bloque>}'");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_while",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion ::= PAR_ABRE condicion PAR_CIERRA op_bin PAR_ABRE condicion PAR_CIERRA 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new String("("+c1+") "+ op +" ("+ c2+")");
				System.out.println("[Regla 40] - <condicion> - Se encontro '("+c1+") "+op+" ("+c2+")'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion ::= PAR_ABRE condicion PAR_CIERRA op_logico PAR_ABRE condicion PAR_CIERRA 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new String("(" +c1+ ") " +op+ " (" +c2+ ")");
				System.out.println("[Regla 41] - <condicion> - Se encontro '("+c1+") "+op+" ("+c2+")'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= PAR_ABRE condicion PAR_CIERRA op_logico expresion 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new String("(" +c1+") "+ op +" "+ e);
				System.out.println("[Regla 42] - <condicion> - Se encontro '("+c1+") "+op+" "+e+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= expresion op_logico PAR_ABRE condicion PAR_CIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new String(e+" "+ op +" (" +c1+ ")");
				System.out.println("[Regla 43] - <condicion> - Se encontro '"+e+" "+op+" ("+c1+")'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= expresion op_logico expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new String(e1+" "+ op +" "+ e2);
				System.out.println("[Regla 44] - <condicion> - Se encontro '"+e1+" "+op+" "+e2+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque ::= LLAVE_ABRE lista_sentencias LLAVE_CIERRA 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new String("{"+ls+"\n}");
				System.out.println("[Regla 45] - <bloque> - Se encontro:\n'{"+ls.substring(1, ls.length())+"}'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque ::= LLAVE_ABRE LLAVE_CIERRA 
            {
              Object RESULT =null;
		 
				RESULT = "";
				System.out.println("[Regla 46] - <bloque> - Se encontro un bloque vacio '{}'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_logico ::= IGUAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = op;
				System.out.println("[Regla 47] - <op_logico> - Se encontro el operador logico '"+op+"'");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_logico ::= DISTINTO 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = op;
				System.out.println("[Regla 48] - <op_logico> - Se encontro el operador logico '"+op+"'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_logico ::= MENOR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = op;
				System.out.println("[Regla 49] - <op_logico> - Se encontro el operador logico '"+op+"'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_logico ::= MENOR_IGUAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = op;
				System.out.println("[Regla 50] - <op_logico> - Se encontro el operador logico '"+op+"'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op_logico ::= MAYOR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT= op;
				System.out.println("[Regla 51] - <op_logico> - Se encontro el operador logico '"+op+"'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op_logico ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = op;
				System.out.println("[Regla 52] - <op_logico> - Se encontro el operador logico '"+op+"'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_logico",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op_bin ::= AND 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = op;
				System.out.println("[Regla 53] - <op_logico> - Se encontro el operador binario '"+op+"'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op_bin ::= OR 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	RESULT = op;
				System.out.println("[Regla 54] - <op_logico> - Se encontro el operador binario '"+op+"'");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
